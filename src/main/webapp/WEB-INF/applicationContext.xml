<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
						http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
						http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd">

	<import resource="classpath:specificApplicationContext.xml" />
    <import resource="classpath*:META-INF/ExtensionContext.xml" />
    <import resource="classpath:webserviceApplicationContext.xml" />


	<bean id="eidasConfigLocation" class="java.lang.String">
		<constructor-arg value="${EIDAS.CONFIG.REPOSITORY:file:c:/Pgm/projects/configEidas/tomcat/}eidas.xml"/>
	</bean>
	<bean id="eidasUtilLocation" class="java.lang.String">
		<constructor-arg value="${EIDAS.CONFIG.REPOSITORY:file:c:/Pgm/projects/configEidas/tomcat/}eidasUtil.properties"/>
	</bean>
	<bean id="specificProperties" class="java.lang.String">
		<constructor-arg value="${EIDAS.CONFIG.REPOSITORY:file:c:/Pgm/projects/configEidas/tomcat/}specific.properties"/>
	</bean>

	<bean id="nodeProps" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="location" ref="eidasConfigLocation"/>
	</bean>
	<bean id="placeholderConfig"
		  class="eu.eidas.node.utils.PropertiesUtil">
		<property name="ignoreUnresolvablePlaceholders" value="true"/>
		<property name="order" value="0"/>
		<property name="locations">
			<list>
				<ref bean="eidasConfigLocation"/>
				<ref bean="specificProperties"/>
			</list>
		</property>
		<property name="fileEncoding" value="UTF-8" />
	</bean>

	<!-- PROPERTIES -->
    <bean id="applicationContextProvider" class="eu.eidas.node.ApplicationContextProvider" scope="singleton"></bean>

    <!-- Resource bundle to translate Service error codes -->
    <bean id="transMessageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="eidastranslation"/>
	</bean>

	<!-- Resource bundle to log error messages to sys-admins -->
    <bean id="sysadminMessageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="sysadmin"/>
	</bean>
	
	<!-- Resource bundle to log error messages -->
    <bean id="errorMessageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="errors"/>
	</bean>

	<!-- SESSION Object -->
	<bean id="serviceSession" class="${specific.session}" scope="session">
		<aop:scoped-proxy />
	</bean>

	<bean id="connectorSession" class="${specific.session}" scope="session">
		<aop:scoped-proxy />
	</bean>

	<!-- LOGGING -->
	<bean id="ServiceLogger" class="${specific.logger}" />
	<bean id="connectorLogger" class="${specific.logger}" />

	<!-- Commons Bean -->
	<bean id="NodeUtil" class="eu.eidas.auth.commons.EIDASUtil">
		<property name="configs"><null/></property>
	</bean>

	<!-- SPECIFIC Classes -->

     <bean id="springManagedSecurityConfig" class="eu.eidas.node.security.ConfigurationSecurityBean" scope="prototype">
         <property name="ipMaxRequests" value="${max.requests.ip}" />
         <property name="spMaxRequests" value="${max.requests.sp}" />
         <property name="ipMaxTime" value="${max.time.ip}" />
         <property name="spMaxTime" value="${max.time.sp}" />
         <property name="trustedDomains" value="${trusted.sp.domains}" />
         <property name="validationMethod" value="${validation.method}" />
         <property name="messageSource" ref="errorMessageSource"/>
         <property name="isContentSecurityPolicyActive" value="${security.header.CSP.enabled:true}"/>
         <property name="isMoaActive" value="${isMoaActive:false}"/>
         <property name="includeXXssProtection" value="${security.header.XXssProtection.block:true}"/>
         <property name="includeXContentTypeOptions" value="${security.header.XContentTypeOptions.noSniff:true}"/>
         <property name="includeXFrameOptions" value="${security.header.XFrameOptions.sameOrigin:true}"/>
         <property name="includeHSTS" value="${security.header.HSTS.includeSubDomains:true}"/>
         <property name="includeMozillaDirectives" value="${security.header.CSP.includeMozillaDirectives:true}"/>
		 <property name="bypassValidation" value="${validation.bypass}" />
     </bean>

	<!-- ACTIONS -->
	<!-- EXCEPTION HANDLERS -->
<!--
	<bean id="springManagedExceptionHandler" class="eu.eidas.node.EidasExceptionHandlerAction"
		scope="prototype">
				<property name="messageSource" ref="sysadminMessageSource"/>
	</bean>
-->

<!--
	<bean id="springManagedInternalExceptionHandler" class="eu.eidas.node.InternalExceptionHandlerAction"
		scope="prototype" />
-->

<!--
	<bean id="springManagedServiceExceptionHandler" class="eu.eidas.node.ServiceExceptionHandlerAction"
		scope="prototype" >
				<property name="messageSource" ref="sysadminMessageSource"/>
	</bean>
-->

	<!-- INTERCEPTOR -->
<!--
	<bean id="springManagedSecurityInterceptor" class="eu.eidas.node.security.SecurityRequestInterceptor"
		scope="prototype">
		<property name="ipMaxRequests" value="${max.requests.ip}" />
		<property name="spMaxRequests" value="${max.requests.sp}" />
		<property name="ipMaxTime" value="${max.time.ip}" />
		<property name="spMaxTime" value="${max.time.sp}" />
		<property name="trustedDomains" value="${trusted.sp.domains}" />
		<property name="validationMethod" value="${validation.method}" />
		<property name="messageSource" ref="errorMessageSource"/>
	</bean>

-->
<!--
    <bean id="springManagedContentSecurityPolicyInterceptor" class="eu.eidas.node.security.SecurityResponseHeaderInterceptor" scope="prototype">
        <property name="isContentSecurityPolicyActive" value="${security.header.CSP.enabled:true}"/>
        <property name="isMoaActive" value="${isMoaActive:false}"/>
        <property name="includeXXssProtection" value="${security.header.XXssProtection.block:true}"/>
        <property name="includeXContentTypeOptions" value="${security.header.XContentTypeOptions.noSniff:true}"/>
        <property name="includeXFrameOptions" value="${security.header.XFrameOptions.sameOrigin:true}"/>
        <property name="includeHSTS" value="${security.header.HSTS.includeSubDomains:true}"/>
        <property name="includeMozillaDirectives" value="${security.header.CSP.includeMozillaDirectives:true}"/>
    </bean>
-->
    <!-- Connector requests parameters via servlet -->
    <bean id="connectorController" class="eu.eidas.node.connector.ConnectorControllerService" scope="prototype">
		<property name="session" ref="connectorSession" />
		<property name="connectorService" ref="springManagedAUCONNECTOR" />
		<property name="assertionConsUrl" value="${connector.assertion.url}" />
        <!--property name="moaService" ref="springManagedMoaService" /-->
        <property name="nodeAuth" value="${connector.destination.url}" />
	</bean>
    <!-- Service requests parameters via servlet -->
    <bean id="serviceController" class="eu.eidas.node.service.ServiceControllerService" scope="prototype">
        <property name="session" ref="serviceSession" />
        <property name="proxyService" ref="springManagedAUSERVICE" />
        <property name="citizenConsentUrl" value="${service.citizenConsentUrl}" />
        <property name="askConsentType" value="${service.askconsent.type}" />
        <property name="callBackURL" value="${service.specificidpredirect.url}" />
    </bean>

    <!-- Specific request parameters-->
    <!--<bean id="specificController" class="eu.eidas.node.servlet.SpecificCommonBeanmonBean" scope="prototype">
        <property name="proxyService" ref="springManagedAUSERVICE" />
        <property name="session" ref="serviceSession" />
    </bean>-->

    <!-- SP requests parameters -->
<!--
	<bean id="springManagedBkuAuthenticationAction" class="eu.eidas.node.BkuAuthenticationAction"
		scope="prototype">
		<property name="moaConfigData" ref="springManagedMoaConfigData" />
	</bean>
-->

	<!-- Connector calls Service -->
<!--
	<bean id="springManagedColleagueRequestAction" class="eu.eidas.node.ColleagueRequestAction"
		scope="prototype">
		<property name="proxyService" ref="springManagedAUSERVICE" />
		<property name="session" ref="serviceSession" />
		<property name="citizenConsentUrl" value="${service.citizenConsentUrl}" />
		<property name="askConsentType" value="${service.askconsent.type}" />
	</bean>
-->

	<!-- Authenticate citizen -->
<!--
	<bean id="springManagedConsentTypeAction" class="eu.eidas.node.CitizenConsentAction"
		scope="prototype">
		<property name="proxyService" ref="springManagedAUSERVICE" />
		<property name="session" ref="serviceSession" />
		<property name="callbackURL" value="${service.specificidpredirect.url}" />
		<property name="askConsentType" value="${service.askconsent.type}" />
	</bean>
-->

	<!-- Validate IdP response -->
<!--
	<bean id="springManagedIdPResponseAction" class="eu.eidas.node.IdPResponseAction"
		scope="prototype">
		<property name="proxyService" ref="springManagedAUSERVICE" />
		<property name="session" ref="serviceSession" />
	</bean>
-->

	<!-- Present consent value -->
	<bean id="springManagedAPResponse" parent="serviceController" class="eu.eidas.node.service.APResponseBean"
		scope="prototype">
		<property name="askConsentValue" value="${service.askconsent.value}" />
	</bean>

	<!-- Connector's answers to SP -->
<!--
	<bean id="springManagedColleagueResponseAction" class="eu.eidas.node.ColleagueResponseAction"
		scope="prototype">
		<property name="session" ref="connectorSession" />
		<property name="connectorService" ref="springManagedAUCONNECTOR" />
        <property name="moaService" ref="springManagedMoaService" />
	</bean>
-->

    <!-- cspReportHandler -->
<!--
    <bean id="springManagedCspReportHandlerAction" class="eu.eidas.node.security.ContentSecurityPolicyReportAction" scope="prototype">
    </bean>
-->

	<!-- Node Classes -->
	<!-- Service Classes -->
	<bean id="springManagedAUSERVICE" class="eu.eidas.node.auth.service.AUSERVICE"
		scope="prototype">
		<property name="citizenService" ref="springManagedAUSERVICECitizen" />
		<property name="samlService" ref="springManagedAUSERVICESAML" />
		<property name="transService" ref="springManagedAUSERVICETranslator" />
	</bean>

	<bean id="springManagedAUSERVICETranslator" class="eu.eidas.node.auth.service.AUSERVICETranslator">
		<property name="specificNode" ref="specificNode" />
	</bean>

	<bean id="springManagedAUSERVICECitizen" class="eu.eidas.node.auth.service.AUSERVICECitizen">
		<property name="serviceUtil" ref="springManagedAUSERVICEUtil" />
	</bean>

	<bean id="springManagedAUSERVICESAML" class="${AUSERVICESAMLclass:eu.eidas.node.auth.service.AUSERVICESAML}">
		<property name="maxQAAlevel" value="${service.maxQAAlevel}" />
		<property name="specificNode" ref="specificNode" />
		<property name="minQAA" value="${min.qaaLevel.value}" />
		<property name="maxQAA" value="${max.qaaLevel.value}" />
		<property name="countryCode" value="${service.countrycode}" />
		<property name="loggerBean" ref="ServiceLogger" />
		<property name="messageSource" ref="errorMessageSource"/>
		<property name="serviceUtil" ref="springManagedAUSERVICEUtil" />
		<property name="samlEngineInstanceName" value="${service.saml.connector:Service}" />
        <property name="samlEngineFactory" ref="samlEngineFactory" />
		<property name="serviceMetadataUrl" value="${service.metadata.url}"/>
		<property name="serviceRequesterMetadataUrl" value="${service.requester.metadata.url}"/>
		<property name="metadataProcessor" ref="nodeMetadataProcessor"/>
	</bean>
	<!-- Connector Classes -->
	<bean id="springManagedAUCONNECTOR" class="eu.eidas.node.auth.connector.AUCONNECTOR"
		scope="prototype">
		<property name="countryService" ref="springManagedAUCONNECTORCountrySelector" />
		<property name="samlService" ref="springManagedAUCONNECTORSAML" />
		<property name="transService" ref="springManagedAUCONNECTORTranslator" />
		<property name="spApplication" value="${connector.spApplication}" />
		<property name="spCountry" value="${connector.spCountry}" />
		<property name="spInstitution" value="${connector.spInstitution}" />
		<property name="spSector" value="${connector.spSector}" />
		<property name="connectorUtil" ref="springManagedAUCONNECTORUtil" />
	</bean>

	<bean id="springManagedAUCONNECTORSAML" class="eu.eidas.node.auth.connector.AUCONNECTORSAML">
		<property name="samlSpInstance" value="${saml.sp}" />
		<property name="samlServiceInstance" value="${saml.service}" />
		<property name="connectorUtil" ref="springManagedAUCONNECTORUtil" />
		<property name="loggerBean" ref="connectorLogger" />
		<property name="messageSource" ref="transMessageSource"/>
        <property name="checkCitizenCertificateServiceCertificate" value="${check.citizenCertificate.serviceCertificate}" />
        <property name="samlEngineFactory" ref="samlEngineFactory" />
		<property name="connectorMetadataUrl" value="${connector.metadata.url}"/>
		<property name="connectorResponderMetadataUrl" value="${connector.responder.metadata.url}"/>
		<property name="metadataProcessor" ref="nodeMetadataProcessor"/>
	</bean>

	<bean id="springManagedAUCONNECTORCountrySelector" class="eu.eidas.node.auth.connector.AUCONNECTORCountrySelector">
		<property name="destination" value="${connector.destination.url}" />
		<property name="connectorUtil" ref="springManagedAUCONNECTORUtil" />
	</bean>

	<bean id="springManagedAUCONNECTORTranslator" class="eu.eidas.node.auth.connector.AUCONNECTORTranslator">
		<property name="specNode" ref="specificNode" />
	</bean>
	<bean id="productionMode" class="java.lang.String">
		<constructor-arg value="${productionmode:false}"/>
	</bean>
	<bean id="runenvironment" class="java.lang.String">
		<constructor-arg value="${node.run.environment:Prod}"/>
	</bean>
	<!-- suffix for some of the beans having two possible implementations - one for development and one for production -->
	<bean id="beanSuffix" class="java.lang.String">
		<constructor-arg value="#{runenvironment.toString()=='Dev' and productionMode.toString()=='false'?'Dev':'Prod'}"/>
	</bean>

    <!-- Defines the class used for the concurrent map implementation : functionality Session tracking & anti replay attack detection -->
    <!-- For testing usage only : this implementation should not be the default one, only for development, there is no expiration implemented-->
    <bean id="springManagedConnectorConcurrentMapProviderDev" class="eu.eidas.node.auth.ConcurrentMapServiceDefaultImpl">
    </bean>
    <bean id="springManagedServiceConcurrentMapProviderDev" class="eu.eidas.node.auth.ConcurrentMapServiceDefaultImpl">
    </bean>

    <!-- Clustered and production ready implementation (use this in real world !) -->
    <bean id="springManagedServiceConcurrentMapProviderProd" class="eu.eidas.node.auth.ConcurrentMapServiceDistributedImpl" lazy-init="true">
        <property name="hazelcastXmlConfigClassPathFileName" value="hazelcast.xml"/>
        <property name="antiReplayCacheName" value="antiReplayCacheService"/>
    </bean>
    <bean id="springManagedConnectorConcurrentMapProviderProd" class="eu.eidas.node.auth.ConcurrentMapServiceDistributedImpl" lazy-init="true">
        <property name="hazelcastXmlConfigClassPathFileName" value="hazelcast.xml"/>
        <property name="antiReplayCacheName" value="antiReplayCacheConnector"/>
    </bean>

	<bean id="springManagedAUCONNECTORUtil" class="eu.eidas.node.auth.connector.AUCONNECTORUtil">
        <constructor-arg ref="springManagedConnectorConcurrentMapProvider#{beanSuffix.toString()}"/>
		<property name="configs" ref="nodeProps" />
		<property name="bypassValidation" value="${validation.bypass}" />
		<property name="minQAA" value="${min.qaaLevel.value}" />
		<property name="maxQAA" value="${max.qaaLevel.value}" />
	</bean>

    <bean id="springManagedAUSERVICEUtil" class="eu.eidas.node.auth.service.AUSERVICEUtil">
        <constructor-arg ref="springManagedServiceConcurrentMapProvider#{beanSuffix.toString()}"/>
		<property name="configs" ref="nodeProps" />
	</bean>
    <bean id="samlEngineFactory" class="eu.eidas.node.init.EidasSamlEngineFactory" scope="singleton">
		<property name="engineConfigurationProvider" ref="engineConfiguration"/>
		<property name="nodeMetadataProcessor" ref="nodeMetadataProcessor"/>
    </bean>
    <bean id="pluginLoader" class="eu.eidas.node.utils.CountrySpecificUtil" scope="singleton">
    </bean>
	<bean id="nodeMetadataProcessor" class="eu.eidas.node.auth.metadata.NODEMetadataProcessor" init-method="initProcessor">
		<property name="metadataRequestTimeout" value="${metadata.request.timeout:-1}"/>
		<property name="cache" ref="metadataCache#{beanSuffix.toString()}"/>
		<!-- node.run.environment:Prod -->
		<property name="fileMetadataLoader" ref="nodeFileMetadataProcessor"/>
		<property name="enableHttpRetrieval" value="${metadata.http.retrieval:true}"/>
		<property name="restrictHttp" value="${metadata.restrict.http:false}"/>
        <property name="validateEntityDescriptorSignature" value="${metadata.check.signature:true}"/>
        <property name="trustedEntityDescriptors" value="${node.metadata.not.signed.descriptors:}"/>
	</bean>
	<bean id="nodeFileMetadataProcessor" class="eu.eidas.node.auth.metadata.NODEFileMetadataProcessor">
		<property name="repositoryPath" value="${metadata.file.repository}"/>
	</bean>
	<bean id="serviceMetadataGeneratorIDP" class="eu.eidas.node.utils.EidasNodeMetadataGenerator">
		<property name="samlServiceIDP" value="${service.saml.conncetor:Service}"/>
		<property name="serviceMetadataUrl" value="${service.metadata.url}"/>
		<property name="samlEngineFactory" ref="samlEngineFactory" />
		<property name="serviceCountry" value="${service.countrycode}" />
		<property name="serviceUrl" value="${service.node.url}" />
		<property name="nodeProps" ref="nodeProps" />
		<property name="validityDuration" value="${metadata.validity.duration:86400}" />
	</bean>
	<bean id="serviceMetadataGeneratorSP" class="eu.eidas.node.utils.EidasNodeMetadataGenerator">
		<property name="samlServiceSP" value="${service.saml.idp:Specific}"/>
		<property name="serviceMetadataUrl" value="${service.requester.metadata.url}"/>
		<property name="samlEngineFactory" ref="samlEngineFactory" />
		<property name="serviceCountry" value="${service.countrycode}" />
		<property name="serviceUrl" value="${service.node.url}" />
		<property name="nodeProps" ref="nodeProps" />
		<property name="validityDuration" value="${metadata.validity.duration:86400}" />
		<property name="assertionUrl" value="${service.specificidpredirect.url:missingConnectorAssertionUrl}" />
	</bean>
	<bean id="connectorMetadataGeneratorSP" class="eu.eidas.node.utils.EidasNodeMetadataGenerator">
		<property name="samlConnectorSP" value="${saml.service:Connector-Service}"/>
		<property name="connectorMetadataUrl" value="${connector.metadata.url}"/>
		<property name="samlEngineFactory" ref="samlEngineFactory" />
		<property name="connectorCountry" value="${connector.spCountry}" />
		<property name="connectorUrl" value="${connector.node.url:}" />
		<property name="assertionUrl" value="${connector.assertion.url:missingConnectorAssertionUrl}" />
		<property name="nodeProps" ref="nodeProps" />
		<property name="validityDuration" value="${metadata.validity.duration:86400}" />
	</bean>
	<bean id="connectorMetadataGeneratorIDP" class="eu.eidas.node.utils.EidasNodeMetadataGenerator">
		<property name="samlConnectorIDP" value="${saml.sp:SP-Connector}"/>
		<property name="connectorMetadataUrl" value="${connector.responder.metadata.url}"/>
		<property name="samlEngineFactory" ref="samlEngineFactory" />
		<property name="connectorCountry" value="${connector.spCountry}" />
		<property name="connectorUrl" value="${connector.node.url:}" />
		<property name="nodeProps" ref="nodeProps" />
		<property name="validityDuration" value="${metadata.validity.duration:86400}" />
	</bean>
	<bean id="eidasNodeConfigDirectory" class="java.lang.String">
		<constructor-arg value="#{placeholderConfig.getEidasXmlLocation()}"/>
	</bean>
	<import resource="classpath:filecertmgmt.xml" />
	
	<!--production -->
	<bean id="metadataCacheProd" class="eu.eidas.node.auth.metadata.DistributedMetadataCaching" lazy-init="true">
		<property name="mapName" value="eidasmetadata"/>
		<property name="hazelcastXmlConfigClassPathFileName" value="hazelcast.xml"/>
	</bean>

	<!-- for development environment -->
	<bean id="metadataCacheDev" class="eu.eidas.node.auth.metadata.SimpleMetadataCaching">
	</bean>
	<bean id="updater" class="com.spopoff.jersey.MajResource" scope="singleton">
            <property name="nodeSamlEngineFactory" ref="samlEngineFactory"/>
	</bean>
</beans>